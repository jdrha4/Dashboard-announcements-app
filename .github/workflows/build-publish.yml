name: Build and Publish

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE_NAME: kohorta

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

jobs:
  docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # This action will set up docker CLI plugin for extended build capabilities with BuildKit,
      # which will then allow us to build the container from this action.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN  }}

      # Create a commit SHA-based tag for the container repositories
      - name: Create SHA Container Tag
        id: sha_tag
        run: |
          tag=$(cut -c 1-7 <<< $GITHUB_SHA)
          echo "::set-output name=tag::$tag"

      # ghcr needs lowercased paths, convert repo owner to lowercase
      - name: Lowercase the repo owner string
        id: repo_owner_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ github.repository_owner }}

      # Build and push the container to the GitHub Container
      # Repository. The container will be tagged as "latest"
      # and with the short SHA of the commit.
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ steps.repo_owner_case.outputs.lowercase }}/${{ env.IMAGE_NAME }}:latest
            ghcr.io/${{ steps.repo_owner_case.outputs.lowercase }}/${{ env.IMAGE_NAME }}:${{ steps.sha_tag.outputs.tag }}
          build-args: |
            git_sha=${{ github.sha }}

  deploy-portainer:
    runs-on: ubuntu-latest
    needs: [docker]
    env:
      WEBHOOK: ${{ secrets.PORTAINER_WEBHOOK }}
    if: (github.event_name == 'push' || github.event == 'workflow_dispatch') && github.ref == 'refs/heads/main'

    steps:
      - name: Trigger Portainer Webhook
        if: env.WEBHOOK != ''
        run: |
          response=$(curl -s -X POST -o /dev/null -w "%{http_code}" ${{ secrets.PORTAINER_WEBHOOK }})
          if [[ "$response" -lt 200 || "$response" -ge 300 ]]; then
            echo "Webhook trigger failed with response code $response"
            exit 1
          fi
